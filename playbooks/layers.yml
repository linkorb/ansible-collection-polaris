# Common layer
- name: Polaris variables validation
  ansible.builtin.import_playbook: linkorb.polaris.baseline.validate
- name: Hosts have standard configuration
  ansible.builtin.import_playbook: linkorb.polaris.baseline.config
- name: Hosts have useful packages
  ansible.builtin.import_playbook: linkorb.polaris.baseline.packages
- name: Hosts have admin users
  ansible.builtin.import_playbook: linkorb.polaris.baseline.admins
- name: Hosts are hardened
  ansible.builtin.import_playbook: linkorb.polaris.baseline.hardening
- name: Hosts are JuiceFS clients
  ansible.builtin.import_playbook: linkorb.polaris.baseline.juicefs_client
- name: Hosts export metrics to Prometheus
  ansible.builtin.import_playbook: linkorb.polaris.baseline.prometheus_node_exporter


# Swarm Layer
- name: Hosts are Docker Engines
  ansible.builtin.import_playbook: linkorb.polaris.container.docker_engine
- name: Hosts are nodes in Docker Swarms
  ansible.builtin.import_playbook: linkorb.polaris.container.docker_swarm


# Kubernetes layer
#- name: Hosts are nodes in k8s clusters
#  ansible.builtin.import_playbook: linkorb.polaris.container.kubernetes


# Overlay layer
- name: Hosts are Headscale nodes
  ansible.builtin.import_playbook: linkorb.polaris.overlay.headscale
- name: Hosts are Tailscale clients
  ansible.builtin.import_playbook: linkorb.polaris.overlay.tailscale_client

- name: Hosts are running Traefik ingress
  ansible.builtin.import_playbook: linkorb.polaris.lb.traefik

# App layer
- name: Hosts are running app stacks
  ansible.builtin.import_playbook: linkorb.polaris.app.stacks
#- name: Hosts are running helmfile
#  ansible.builtin.import_playbook: linkorb.polaris.apps.helmfile



# - ansible.builtin.import_playbook: linkorb.polaris.lb
#   tags: polaris_layer_lb

# - ansible.builtin.import_playbook: linkorb.polaris.logging_control
#   tags: polaris_layer_logging_control
# - ansible.builtin.import_playbook: linkorb.polaris.logging_node
#   tags: polaris_layer_logging_node


# hardware-layer
# Multipass, Terraform, etc (optional)

# load-balancer / ingress layer:
# service: load balancers (traefik, ssl offloading, swarm provider)

# logging-layer
# control: deploy loki as docker stack (shipyard)
# all: setup promtail reporting to loki (optional, fluentd, fluentbit)
- name: Hosts are running logging stacks
  ansible.builtin.import_playbook: linkorb.polaris.logging.containers

#==========
# database-layer:
# service: deploy container-based mysql / mariadb / postgres clusters
# service: dbdb for snapshots, etc
# storage-layer:
# service: initialize juicefs filesystems on mariadb
# service: run juicefs as S3 service (optional: with webdav too?)
# all: install juicefs clients, connecting to mysql for metadata
# service: nfs servers (if needed? Maybe juicefs covers these use-cases)
# monitoring-layer:
# all: setup prometheus node exporter available on overlay ip
# control: deploy prometheus + alert manager
# control: goalert + xping
# control: deploy grafana
# control: deploy jaeger
# management-layer:
# control: deploy rundeck
# … maybe portainer, kubernetes dashboards, argo, etc
# backup-layer
# service: backuppc, pull from hosts
# … something for juicefs / object storage buckets
# firewall-layer
# Generated multi-host iptables-based rules, based on platform + app rules
